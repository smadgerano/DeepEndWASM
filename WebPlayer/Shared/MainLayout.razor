@using Microsoft.JSInterop
@using System.Runtime.InteropServices
@using Append.Blazor.Notifications
@inject INotificationService NotificationService
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localSotrage


<!-- <style>
    body { padding-top: 55px; padding-bottom: 110px; }
</style> -->

<div class="page">
    <div class="sidebar">
        <NavMenu /> 
    </div>

    <main>
        <article class="content px-4">
            <Player />
            @Body
        </article>
    </main>
</div>


<div id="streamURL" hidden>@AppState.CurrentStream.URL</div>
<div id="dspGlobalEnable" hidden>@AppState.DspGlobalEnable</div>
<div id="isPlaying" hidden>@AppState.IsPlaying</div>

<audio controls hidden preload="auto" id="streamSourceElement" src="https://deependswamp.ddns.net:8443/deepend" type="audio/mpeg" crossorigin="anonymous"></audio>

@code {
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    public List<RadioCore.StreamSource> defaultStreams = RadioCore.Globals.StreamSources();

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private IJSObjectReference _jsModule;

    protected override async Task OnInitializedAsync()
    {
        RadioCore.StreamSource storedStream = await localSotrage.GetItemAsync<RadioCore.StreamSource>("storedStream");

        if(storedStream  is null)
        {
            storedStream = defaultStreams.Where(x => x.SystemDefault is true).First();

            await localSotrage.SetItemAsync("storedStream", storedStream);
        }

        AppState.CurrentStream = storedStream;


        bool? dspGlobalEnable = await localSotrage.GetItemAsync<bool?>("dspGlobalEnabled");

        if(dspGlobalEnable  is null)
        {
            await localSotrage.SetItemAsync("dspGlobalEnabled", false);
        }

        AppState.DspGlobalEnable = Convert.ToBoolean(dspGlobalEnable);




        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/audiostack.js");

        await _jsModule.InvokeVoidAsync("loadWebAudio");

        //ClockTick();
    }  

    protected async Task ClockTick()
    {
        var periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        while (await periodicTimer.WaitForNextTickAsync())
        {
            AppState.Clock = DateTime.UtcNow;
        }
    }

}