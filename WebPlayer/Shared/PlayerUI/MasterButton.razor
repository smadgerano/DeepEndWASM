@using Microsoft.JSInterop

@if (AppState.IsPlaying)
{
    <!-- <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.2)" Delay="TimeSpan.FromSeconds(0)" Easing="Easings.EaseInOut"> -->
        <div id="masterButton">
            <span class="h1" style="font-size:@FontSize;" onclick="@StopStream">
                <i id="masterButtonIcon" class="fa-regular fa-circle-pause" style="color:@FontColour; " ></i>
            </span>
        </div>
   <!-- </Animate> -->
}
else
{
    <!-- <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.2)" Delay="TimeSpan.FromSeconds(0)" Easing="Easings.EaseInOut"> -->
        <div id="masterButton">
            <span class="h1" style="font-size:@FontSize" onclick="@StartStream" >
                <i id="masterButtonIcon" class="fa-regular fa-circle-play" style="color:@FontColour;" ></i>
            </span> 
        </div>
    <!-- </Animate> -->
}

@code {
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    [Parameter]
    public string FontSize { get; set; }

    [Parameter]
    public string FontColour { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private IJSObjectReference _jsModule;

    protected override async Task OnInitializedAsync()
    {
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/masterbutton.js");

    }

    private async Task StartStream()
    {
        string URL = AppState.CurrentStream.URL.ToString();

        await _jsModule.InvokeVoidAsync("startPlayer", URL);
        AppState.IsPlaying = true;
    }

    private async Task StopStream()
    {
        string URL = AppState.CurrentStream.URL.ToString();

        await _jsModule.InvokeVoidAsync("stopPlayer");
        AppState.IsPlaying = false;
    }
}