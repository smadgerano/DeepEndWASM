@using Microsoft.JSInterop
@using System.Runtime.InteropServices


@if (AppState.BigPlayerUI)
{
    showBigPlayer = "visible";
    showSmallPlayer = "hidden";
}
else
{
    showBigPlayer = "hidden";
    showSmallPlayer = "visible";
}

@if (AppState.IsPlaying)
{
    masterButtonIcon = "fa-circle-pause";
}
else
{
    masterButtonIcon = "fa-circle-play";
}

<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.3)" Delay="TimeSpan.FromSeconds(0)" Easing="Easings.EaseInOut">
<div class="container" style="visibility:@showBigPlayer">
    <div class="row">
    </div>
    <div class="col" style="text-align: center;" justify-content-center align-items-center>
        <div id="masterButtonLarge">
            <span class="h1" style="font-size:6em;">
                <i id="masterButtonIconLarge" class="fa-regular @masterButtonIcon" style="color:#212529e6;" onclick="@TogglePlayState" ></i>
            </span>
        </div>
        <br /> 
        <br />
        <br />
        <input type="range" class="form-range" min="0.0" max="1.0" step="0.01" @bind-value="@AppState.Volume" id="waapiVolumeSliderBigUI" > 
    </div>
    </div>
    <div class="row">
    </div>
<canvas id="oscilloscope" width="300" height="100"></canvas>
</Animate>
   
<footer class="footer mt-auto py-3 pb-2 pt-2 text-white fixed-bottom" style="background-color: #2c3136; visibility:@showSmallPlayer">
    <Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(0.3)" Delay="TimeSpan.FromSeconds(0)" Easing="Easings.EaseInOut">
        <div class="container" >           
            <div class="row align-items-center">
                <div class="col-2 align-items-center" style="text-align: right;"> 
                    <div id="masterButtonSmall">
                        <span class="h1" style="font-size:3.2em;">
                            <i id="masterButtonIconSmall" class="fa-regular @masterButtonIcon" style="color:#fbfbfb;" onclick="@TogglePlayState" ></i>
                        </span>
                    </div>
                </div>
                <div class="col-2 col-md-2 col-lg-2 col-xl-1 col-xxl-1 d-flex justify-content-center align-items-center" >
                    <input type="range" class="form-range" min="0.0" max="1.0" step="0.01" id="waapiVolumeSliderSmallUI" @bind-value="@AppState.Volume" >
                </div>                
                <div class="col-8 align-items-center">   
                    <div class="row">
                        <span class="h5">Feel The Wrath Of My Beuatiful Screams</span>
                    </div>
                    <div class="row pt-0">
                        <span style="color: #adb5bd;"><em>the Artist Formerly Known As Pasta</em></span>
                    </div> 
                </div>
            </div>
        </div> 
    </Animate>
</footer>    


@code {
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    List<Data.StreamSource> streams = Data.Globals.StreamSources();

    [Parameter]
    public string FontSize { get; set; }

    [Parameter]
    public string FontColour { get; set; }

    string showBigPlayer = "";
    string showSmallPlayer = "";
    string masterButtonIcon = "";

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    private IJSObjectReference _jsModule;

    protected override async Task OnInitializedAsync()
    {
        //_jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/webaudio.js");

        //await _jsModule.InvokeVoidAsync("loadWebAudio");
    }

    private async Task TogglePlayState()
    {
        if (AppState.IsPlaying)
        {
            AppState.IsPlaying = false;
        }
        else if (!AppState.IsPlaying)
        {
            AppState.IsPlaying = true;
        }
    }


    private RequestForm requestForm = new(){ };

    public class RequestForm{
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Country { get; set; }
        public string? URL { get; set; }
    }

    public class StreamURL
    {
        public string? streamURL {get; set; }
    }

}
