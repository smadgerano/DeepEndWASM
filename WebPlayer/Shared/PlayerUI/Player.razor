@using Microsoft.JSInterop
@inject IJSRuntime JS;

@if (AppState.BigPlayerUI)
{
    <div class="container">
        <div class="row">
            <div class="col-2 col-md-2 col-lg-2 col-xl-1 col-xxl-1 d-flex justify-content-center align-items-center" >
                <input type="range" class="form-range" min="0.0" max="1.0" step="0.01" id="volumeSlider" @bind-value="@AppState.Volume"  oninput="setVolume(this.value)" > 
            </div>
            <div class="col" style="text-align: center;">
                <WebPlayer.Shared.PlayerUI.MasterButton FontSize="6em" FontColour="#212529e6"/>
            </div>
        </div>

        <div class="row">
            <div class="col-4">
                <EditForm Model="@requestForm" OnValidSubmit="@HandleValidSubmit">
                    <ValidationSummary />
                    <div class="mb-3 input-group ">
                        <InputSelect @bind-Value="requestForm.URL" class="form-control form-select-sm" id="streamName" >
            
                            @foreach (var item in streams )
                            { 
                                if(item.URL == AppState.StreamURL)
                                {
                                    <option selected value="@item.URL">@item.Country: @item.Name</option>
                                }
                                else
                                {
                                    <option value="@item.URL">@item.Country: @item.Name</option>
                                }
                            }
                        </InputSelect>
                        <button type="submit" class="btn-sm btn-success" onclick="video.load();">Go</button>  
                    </div>
                </EditForm> 
            </div>
        </div>
    </div>
}
else
{
    <footer class="footer mt-auto py-3 text-white fixed-bottom" style="background-color: #2c3136">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-2 align-items-center" style="text-align: right;"> 
                    <WebPlayer.Shared.PlayerUI.MasterButton FontSize="3.2em" FontColour="#fbfbfb" />
                </div>
                <div class="col-2 col-md-2 col-lg-2 col-xl-1 col-xxl-1 d-flex justify-content-center align-items-center" >
                    <input type="range" class="form-range" min="0.0" max="1.0" step="0.01" id="volumeSlider" @bind-value="@AppState.Volume"  oninput="setVolume(this.value)" >
                </div>
                <div class="col-8 align-items-center">   
                    <div class="row">
                        <span class="h5">Feel The Wrath Of My Beuatiful Screams</span>
                    </div>
                    <div class="row pt-0">
                        <span style="color: #adb5bd;"><em>the Artist Formerly Known As Pasta</em></span>
                    </div> 
                </div>
            </div>
        </div>
    </footer>
}

<audio controls hidden preload="auto" id="streamSourceElement" name="streamSourceElement" src="https://deependswamp.ddns.net:8443/deepend" type="audio/mpeg"></audio>

@code {
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    List<Data.StreamSource> streams = Data.Globals.StreamSources();

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task HandleValidSubmit(EditContext editContext)
    {
        AppState.StreamURL = requestForm.URL;
        AppState.IsPlaying = false;

        var stream = new List<StreamURL> () { };

        stream.Add(new StreamURL { streamURL = AppState.StreamURL });       
                
        await JS.InvokeVoidAsync("switchStream", stream);
        AppState.IsPlaying = true;
    }

    private RequestForm requestForm = new(){ };

    public class RequestForm{
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Country { get; set; }
        public string? URL { get; set; }
    }

    public class StreamURL
    {
        public string? streamURL {get; set; }
    }
}
