@using Microsoft.JSInterop
@inject IJSRuntime JS;


@if (AppState.BigPlayerUI)
{
    <div class="row ">
        <div class="col-4">
            <button class="btn-sm btn-success" onclick="@PlayHowler">Play</button>  
        </div
        <div class="col-4">
            <button class="btn-sm btn-danger" onclick="@StopHowler">Stop</button>  
        </div>
        <div class="col-4">
            <EditForm Model="@requestForm" OnValidSubmit="@HandleValidSubmit">
                <ValidationSummary />
                <div class="mb-3 input-group ">
                    <InputSelect @bind-Value="requestForm.URL" class="form-control form-select-sm" id="streamName" >
            
                        @foreach (var item in streams )
                        { 
                            if(item.URL == AppState.StreamURL)
                            {
                                <option selected value="@item.URL">@item.Country: @item.Name</option>
                            }
                            else
                            {
                                <option value="@item.URL">@item.Country: @item.Name</option>
                            }
                    
                        }
                    </InputSelect>
                    <button type="submit" class="btn-sm btn-success" onclick="video.load();">Go</button>  
                </div>
            </EditForm> 
        </div>
    </div>
}
else
{
    <footer class="footer mt-auto py-2 navbar-dark text-white bg-dark fixed-bottom">
      <div class="container">
        <div class="row ">
            <div class="col-4">
                <button class="btn-sm btn-success" onclick="@PlayHowler">Play</button>  
            </div
            <div class="col-4">
                <button class="btn-sm btn-danger" onclick="@StopHowler">Stop</button>  
            </div>
            <div class="col-4">
                <EditForm Model="@requestForm" OnValidSubmit="@HandleValidSubmit">
                    <ValidationSummary />
                    <div class="mb-3 input-group ">
                        <InputSelect @bind-Value="requestForm.URL" class="form-control form-select-sm" id="streamName" >
            
                            @foreach (var item in streams )
                            { 
                                if(item.URL == AppState.StreamURL)
                                {
                                    <option selected value="@item.URL">@item.Country: @item.Name</option>
                                }
                                else
                                {
                                    <option value="@item.URL">@item.Country: @item.Name</option>
                                }
                    
                            }
                        </InputSelect>
                        <button type="submit" class="btn-sm btn-success" onclick="video.load();">Go</button>  
                    </div>
                </EditForm> 
            </div>
        </div>
        </div>
    </footer>
}


@code {
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    List<Data.StreamSource> streams = Data.Globals.StreamSources();

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task PlayHowler()
    {
        await JS.InvokeVoidAsync("startHowlerPlayer");
        AppState.IsPlaying = true;
    }

    private async Task StopHowler()
    {
        await JS.InvokeVoidAsync("stopHowlerPlayer");
        AppState.IsPlaying = false;
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {
        AppState.StreamURL = requestForm.URL;
        AppState.IsPlaying = false;

        var stream = new List<StreamURL> () { };

        stream.Add(new StreamURL { streamURL = AppState.StreamURL });       
                
        await JS.InvokeVoidAsync("switchHowlerStream", stream);
        AppState.IsPlaying = true;
    }

    private RequestForm requestForm = new(){ };

    public class RequestForm{
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Country { get; set; }
        public string? URL { get; set; }
    }

    public class StreamURL
    {
        public string? streamURL {get; set; }
    }
}
